# RELEAF API

[![standard-readme compliant](https://img.shields.io/badge/readme%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)

## Table of Contents

- [General Info](#general-info)
- [Technologies](#technologies)
- [3rd Party Services](#services)
- [Setup](#setup)
- [Conventions](#conventions)
- [Tests](#tests)
- [Status](#status)

## General Info

This is the backend codebase for the RELEAF Mills and PKS Dumpsites app. It provides RESTful API endpoints to manage entities such as dumpsites and mills, with robust support for database and caching.

## Technologies

This project is built with:

- [Node.js/ExpressJS](https://expressjs.com)
- [PostgreSQL](https://postgresql.org)
- [Redis](https://redis.io)

## 3rd Party Services

- [PostgreSQL](https://postgresql.org): Database management
- [Better Uptime](https://betteruptime.com): Web Monitoring & Status page
- [Cronjob.org](https://cronjob.org): Cronjob management

## Conventions

### File Structure

Entities are self-contained and organized by modules. For example, all dumpsite-related features are within the `dumpsites` directory.

```
├── modules
│   ├── dumpsite
│   │   ├── controller.ts
│   │   ├── entity.ts
│   │   ├── dto.ts
│   │   └── route.ts
│   ├── mills
│       ├── controller.ts
│       ├── entity.ts
│       ├── repository.ts
│       └── route.ts
```

### Exports

Exports are inline for better organization and maintainability.  

### Imports

Imports are sorted alphabetically. To enable this in `VSCode`, add the following to your `settings.json`:

```json
"editor.codeActionsOnSave": {
  "source.organizeImports": true
},
```

### Naming

- Models are capitalized and singular, e.g., `export interface IMill {};`.
- Filenames for entities are lowercase, plural, and hyphen-separated, e.g., `mills`, `dumpsites`, etc.

### Documentation

Use namespaces for files, e.g., `/** @namespace PrescriptionController */`.

Sample:

```ts
/**
 * Fetches dumpsites
 * @async
 * @function fetch
 * @param {Object} req - The request object
 * @param {Object} res - The response object
 * @returns Promise<Object>
 */
```

### Swagger Docs

Store endpoints for a single module together in one folder for modularity.

## Setup

### Prerequisites

To run this project locally, ensure you have the following installed:

- [Redis](https://redis.io)
- [PostgreSQL](https://postgresql.org)

### Installation

```bash
yarn install
yarn run migrate:up
yarn run seed:up
yarn dev
```

## Tests

### Unit Tests

Unit tests have been written to validate key functionalities of the API. Tests ensure the correctness of:

- **Mills Module**  
  - Validation of mill creation and updates.
  - Fetching mill details.

- **Dumpsites Module**  
  - Endpoint response validation for dumpsite creation.
  - Ensuring accurate dumpsite list retrieval.

- **Utility Functions**  
  - Testing helper functions used across the codebase.

The tests are written using [Mocha](https://mochajs.org) and [Chai](https://www.chaijs.com).  

### Running Tests

To execute unit tests, run:

```bash
yarn test
```

### Code Coverage

Ensure all changes are accompanied by tests to maintain high code coverage.

## Status

Status page generated by BetterUptime: [View Status Page](https://releaf.betteruptime.com)
